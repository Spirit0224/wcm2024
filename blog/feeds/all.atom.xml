<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>41223122 網際內容管理</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-20T01:47:18+08:00</updated><entry><title>期中課程整理</title><link href="./2024-WCM-%E6%9C%9F%E4%B8%AD-blog-tutorial.html" rel="alternate"></link><published>2024-03-13T11:00:00+08:00</published><updated>2024-06-20T01:47:18+08:00</updated><author><name>yen</name></author><id>tag:None,2024-03-13:./2024-WCM-期中-blog-tutorial.html</id><summary type="html">&lt;p&gt;網際內容管理課程的英文名稱為 Web-based Content Management, 課程目標是讓學員得以運用網頁來管理與個人或專業領域應用相關的內容. 當然, 我們還想啟發學員對於網頁與內容管理發展趨勢的思考, 並且針對學員選課, 評定出一個合理的修課成績!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理課程的英文名稱為 Web-based Content Management, 課程目標是讓學員得以運用網頁來管理與個人或專業領域應用相關的內容. 當然, 我們還想啟發學員對於網頁與內容管理發展趨勢的思考, 並且針對學員選課, 評定出一個合理的修課成績!&lt;/p&gt;


&lt;h1&gt;網頁式內容管理&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;目前無論是 Github 的 Codespaces, Gitpod 或 Replit 都讓使用者可以直接在網頁瀏覽器中維護網站內容. 其中 Replit 還提供手機 App 讓使用者透過手機或平板管理網頁內容.&lt;/p&gt;
&lt;p&gt;網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中, 且讓使用者寄存在 Github 中, 只要能夠執行 Python 的雲端或近端環境都能開啟網頁編輯程式進行改版, 而編輯完成的網頁資料則可在 Github 倉儲中透過 Pages 的全球資訊網伺服器功能呈現網站內容.&lt;/p&gt;
&lt;p&gt;網際內容管理課程所採用的管理系統採用 Python Flask 編寫, 其中除了章節式的網頁內容採超文件的 H 標註進行分頁外, 還導入 Pelican 與 Reveal.js 等兩個延伸套件, 其中 Pelican 可用來建立網誌, 而 Reveal.js 則可用來建立網頁上的簡報資料.&lt;/p&gt;
&lt;p&gt;學習議題: 如何建立 Github 上的網站? 如何管理內容? 如何建立章節式網站? 能放入甚麼多媒體內容? 靜態圖文? 動態圖文? 線上遊戲? 3D 零組件展示? 如何建立網頁系統中的網誌? 如何建立網頁系統中的簡報?&lt;/p&gt;
&lt;h1&gt;Python 程式系統&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;上課用的電腦中配置了一套舊版的可攜式 Python 程式系統, 可讓使用者建立新版的可攜式 Python 程式系統, 放入 USB 隨身碟後, 可以在任何一台 64 位元的 Winodws 操作系統中使用, 主要目的除了可用來維護位於 Github 的網頁內容之外, 也可用來開發各種 Python 程式, 或與其他 Windows 應用套件結合使用, 例如: 與 CoppeliaSim 機器人模擬場景結合, 建立機電控制系統, 或與 Siemens NX 的 API 延伸程式結合應用.&lt;/p&gt;
&lt;p&gt;學習議題: 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? 在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? (精密)機械設計流程? 設計運算? 特定系統模擬?&lt;/p&gt;
&lt;h1&gt;網頁上的 IDE&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;IDE 是甚麼? 可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎? 與近端操作系統上的開發有何不同? 多人協同? 這樣安全嗎?&lt;/p&gt;
&lt;p&gt;學習議題: 學會使用網頁上的各種 IDE 之後, 有沒有甚麼感想或心得?&lt;/p&gt;
&lt;h1&gt;AI 工具&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;ChatGPT 與 Gemini Pro 都可以直接利用 Gmail 帳號登入, 初級應用目前都可免費使用, 這兩個 AI 工具可以協助我們解決甚麼問題? 為什麼有人驚這些工具為天人? 有人卻覺得還好而已, 並無法從中挖出甚麼資料?&lt;/p&gt;
&lt;p&gt;學習議題: AI 工具曾經協助我們解決甚麼問題?&lt;/p&gt;</content><category term="期中"></category><category term="2020FallCP"></category></entry><entry><title>WCM2024 W6 課程</title><link href="./2024-WCM-W6-blog-tutorial.html" rel="alternate"></link><published>2024-03-12T11:00:00+08:00</published><updated>2024-06-20T01:43:51+08:00</updated><author><name>yen</name></author><id>tag:None,2024-03-12:./2024-WCM-W6-blog-tutorial.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;A. git 的發展歷史&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;2005 年：Git 誕生。 Linus Torvalds 建立Git，並在Linux 核心開發中開始使用它。&lt;/p&gt;
&lt;p&gt;2005 年：首個公開發布。&lt;/p&gt;
&lt;p&gt;2006 年：引進GitHub。 廣泛的使用情境。&lt;/p&gt;
&lt;p&gt;2007 年：Git 1.5 發布。這個版本引入了一些重要的特性，包括git-config等指令，以及git-svn工具。&lt;/p&gt;
&lt;p&gt;2008 年：Git 1.6 發布。此版本引入了git-clone命令的改進，以及git-rerere工具用於解決衝突。&lt;/p&gt;
&lt;p&gt;2009 年：Git 1.6.3 發布。這個版本引入了git bisect指令，用於二分查找引入Bug 的提交。&lt;/p&gt;
&lt;p&gt;2012 年：Git 1.8 發布。這個版本引入了git-merge和git-push的改進，以及對子模組的改進。&lt;/p&gt;
&lt;p&gt;2014 年：Git 2.0 發布。這個版本引入了一些重大變化，包括預設使用push.default = simple 和預設情況下移除git submodule 中的.gitmodule 檔案。&lt;/p&gt;
&lt;p&gt;2016 年：Git 2.10 發布。這個版本引入了多種新特性，包括改進的git rebase，新的git worktree命令等。&lt;/p&gt;
&lt;p&gt;2018 年：Git 2.19 發布。這個版本引入了git switch和git restore命令，用於替代git checkout。&lt;/p&gt;
&lt;p&gt;2020 年：Git 2.29 發布。這個版本引入了git sparse-checkout命令，允許使用者只檢出倉庫的一部分文件。&lt;/p&gt;
&lt;p&gt;2022 年：仍在進行中&lt;/p&gt;
&lt;h1&gt;B.創作人的相關履歷&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;1.Git 的創辦人是Linus Torvalds，他是一位著名的電腦程式設計師，同時也是Linux 核心的創作者&lt;/p&gt;
&lt;p&gt;2.經歷：&lt;/p&gt;
&lt;p&gt;Linux 核心開發者（1991年至今）&lt;/p&gt;
&lt;p&gt;⓵創建並領導Linux 核心項目，負責開發和維護Linux 核心。&lt;/p&gt;
&lt;p&gt;②吸引了全球數千名開發者的參與，使Linux 成為最受歡迎的開源作業系統之一。&lt;/p&gt;
&lt;p&gt;③建立Git 分散式版本控制系統，並在Linux 核心開發中開始使用它。&lt;/p&gt;
&lt;p&gt;④為了解決Linux 核心開發過程中遇到的問題，例如處理大規模程式碼庫和多人協作等，而設計了Git。&lt;/p&gt;
&lt;h1&gt;C. git 解決內容管理問題&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;1.對於一般的專業人士，無論是軟體開發者、寫作者、設計師或其他領域的從業者，Git 都可以作為一個強大的工具來解決內容管理問題&lt;/p&gt;
&lt;p&gt;①版本控制: 使用Git 可以輕鬆追蹤檔案的變更歷史，從而方便回溯到先前的版本。&lt;/p&gt;
&lt;p&gt;②協作合作: 多人協作時，Git 提供了分支和合併的功能，可以讓團隊成員在不干擾彼此的情況下並行工作。&lt;/p&gt;
&lt;p&gt;③備份與同步: 使用Git 可以輕鬆地將檔案備份到遠端倉庫，並確保資料的安全性和可靠性。&lt;/p&gt;
&lt;p&gt;④程式碼審查與回饋: Git 提供了程式碼審查工具，團隊成員可以透過提交程式碼並要求審查來進行程式碼品質控制&lt;/p&gt;
&lt;p&gt;⑤專案管理: Git 倉庫可以與專案管理工具（如Jira、Trello等）集成，幫助團隊追蹤任務、問題和進度，提高專案管 理的效率和透明度。&lt;/p&gt;</content><category term="W6"></category><category term="2020FallCP"></category></entry><entry><title>WCM2024 W5 課程</title><link href="./2024-WCM-W5-blog-tutorial.html" rel="alternate"></link><published>2024-03-10T11:00:00+08:00</published><updated>2024-06-20T01:41:42+08:00</updated><author><name>yen</name></author><id>tag:None,2024-03-10:./2024-WCM-W5-blog-tutorial.html</id><content type="html">&lt;p&gt;w5 1.複習w3的分組倉儲權限設定影片&lt;/p&gt;</content><category term="W5"></category><category term="2020FallCP"></category></entry><entry><title>WCM2024 W4 課程</title><link href="./2024-WCM-W4-blog-tutorial.html" rel="alternate"></link><published>2024-03-09T11:00:00+08:00</published><updated>2024-06-20T01:39:27+08:00</updated><author><name>yen</name></author><id>tag:None,2024-03-09:./2024-WCM-W4-blog-tutorial.html</id><summary type="html">&lt;p&gt;複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法.&lt;/p&gt;


&lt;h1&gt;有關建立網站&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;這裡所謂的網站指的是 Web site, 也就是 WWW (World Wide Web) 伺服器 (Server)端的超文件 (Hypertext), 且此超文件包含 css 與 Javascript 資料, 用來定義使用者利用瀏覽器連線時所得到的資料內容.&lt;/p&gt;
&lt;p&gt;網際內容管理的網際指的並非網際網路的 Internet, 而是指 Web-based, 也就是針對網頁瀏覽器檢視的內容加以管理, 而這些內容除了具備各種不同格式的文字外, 還包括靜態圖片與動態的影音多媒體.&lt;/p&gt;
&lt;p&gt;因為希望所管理的網站內容, 從無到有的過程留下改版歷程, 因此使用分散式版次管理系統進行網頁的配置, 也就是利用 Github 所提供的 Pages 功能來建立網頁.&lt;/p&gt;
&lt;p&gt;又因為直接編輯帶有各種標註符號的超文件過程較為繁瑣, 因此利用 Python 與 Javascript 編寫了一套網頁編輯系統, 也就是 cmsimde 套件, 可以在 Python 與特定模組的環境中啟動, 也就是所謂的動態編輯網站, 使用者在 cmsimde 網際管理系統中所編輯的超文件內容存入套件 config 目錄中的 content.htm, 並且利用此超文件中的 H1~H3 標註作為分頁界線, 將 content.htm 分割為具有三個階層的頁面內容, 用來展示使用者所建立的最終 Github Pages 靜態網頁內容, 此網頁資料儲存在 cmsimde 套件中的 content 目錄, 並將靜態的 css 與 Javascript 儲存在 cmsimde 套件中的 static 目錄中.&lt;/p&gt;
&lt;p&gt;cmsimde 套件有關動態與靜態網站的標題、啟動網址與埠號設定位於 init.py 程式檔案中, 若將 init.py 中的啟動網址設為外部 IP, 則此網際內容管理系統的編輯網站, 可直接連外.&lt;/p&gt;
&lt;p&gt;wcm2024_1a_w4_複習有關網站與 cmsimde 相關內容教學影片&lt;/p&gt;
&lt;h1&gt;Replit 靜態網站檢視&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵.&lt;/p&gt;
&lt;p&gt;說明如何在 Replit 檢視靜態網站教學影片&lt;/p&gt;
&lt;p&gt;說明如何下載 replit_main2.7z 並在倉儲中建立兩個檔案教學影片&lt;/p&gt;</content><category term="W4"></category><category term="wcm2024"></category></entry><entry><title>WCM2024 W3 課程</title><link href="./2024-WCM-W3-blog-tutorial.html" rel="alternate"></link><published>2024-03-08T11:00:00+08:00</published><updated>2024-06-20T01:39:22+08:00</updated><author><name>yen</name></author><id>tag:None,2024-03-08:./2024-WCM-W3-blog-tutorial.html</id><summary type="html">&lt;p&gt;除了 Replit, Github Codespaces, Gitpod 之外, 還介紹如何利用可攜系統維護個人與分組網站.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;除了 Replit, Github Codespaces, Gitpod 之外, 還介紹如何利用可攜系統維護個人與分組網站.&lt;/p&gt;


&lt;h1&gt;利用 Github Classroom 分組&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;四技期中分組作業名稱為 1a, 各組組長在取得作業連結之後, 自行建立各組 Team, 以第一組為例, Team 名稱為 ag1, 之後以每組至多 6 名組員, 透過作業連結加入 ag1 Team, 其餘各組組員則依序建立 ag2, ag3 等 Team 名稱, 讓該組組員可以加入.&lt;/p&gt;
&lt;p&gt;以第一組為例, 完成 ag1 Team 建立後, 將取得 mdewcm2024 帳號下的 1a-ag1 倉儲, 所有第一組的組員均對此分組倉儲有管理權, 可以使用登入 Github 的帳號權限進行改版.&lt;/p&gt;
&lt;p&gt;由於在 Replit 免費帳號下, 僅能與登入 Github 的帳號進行授權, 且在 Replit 導入的倉儲, 任何人都能夠取得倉儲下 .git 的所有資料, 因此無法利用組員的 Github 帳號 token 取得管理授權, 而必須動態在 /home/runner/.ssh 下建立 id_rsa 與 config 連線設定, 各組組員才能利用 Replit 管理分組網站內容.&lt;/p&gt;
&lt;h1&gt;利用 Github Codespaces 維護倉儲&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;如前所述, 使用 Replit 管理分組網站, 必須採動態建立 .ssh 目錄中的私鑰與 config, 過程比較複雜, 但若採用 Github Codespaces, 則可以在登入 Github 帳號下, 管理該帳號所有授權的倉儲, 包括分組倉儲與網站, 唯一的限制是每個月只能使用 120 core hours, 若以內定的 2 core 執行管理, 則平均每天可以使用兩個小時.&lt;/p&gt;
&lt;h1&gt;常用的 git 指令&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;git 的新增、提交與推送指令:&lt;/p&gt;
&lt;p&gt;git add . git commit -m "說明字串" git push&lt;/p&gt;
&lt;p&gt;使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括:&lt;/p&gt;
&lt;p&gt;git config --global user.name "提交者的 github 帳號名稱"&lt;/p&gt;
&lt;p&gt;git config --global user.email "提交者在 github 所登錄的 email address"&lt;/p&gt;
&lt;p&gt;使用者也可以利用 git version 查詢目前所使用的 git 版本.&lt;/p&gt;
&lt;p&gt;git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本.&lt;/p&gt;
&lt;p&gt;若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端.&lt;/p&gt;
&lt;p&gt;git pull = git fetch + git merge&lt;/p&gt;
&lt;p&gt;由於要將各組員的 wcm2024 設定為各分組倉儲的子模組, 因此必須利用 git submodule add 以各組員的學號作為子目錄名稱, 利用下列指令, 將組員倉儲新增為分組倉儲的子模組:&lt;/p&gt;
&lt;p&gt;git submodule add 倉儲網址 子目錄&lt;/p&gt;
&lt;p&gt;若只要取下倉儲的主要內容, 可以使用下列指令:&lt;/p&gt;
&lt;p&gt;git clone 倉儲網址_協定.git 指定目錄與否&lt;/p&gt;
&lt;p&gt;若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules:&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules 倉儲網址_協定.git 指定目錄與否&lt;/p&gt;
&lt;p&gt;說明如何將組員的個人倉儲納入分組倉儲成為子模組&lt;/p&gt;
&lt;p&gt;說明如何在 Replit 維護分組倉儲&lt;/p&gt;
&lt;h1&gt;利用 Gitpod 維護倉儲&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;https://www.gitpod.io/ 的使用與 Codespaces 類似, 都可透過 Visual Studio Code 的網際介面進行倉儲的管理, 每個月有 50 小時的免費使用時間, 可以使用 Github 帳號登入, 相較於 Replit, 其給定的免費資源較多, 執行速度快且 .ssh 下的 id_rsa 與 config 僅需設定一次.&lt;/p&gt;
&lt;h1&gt;利用 Gitpod 維護倉儲&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;前面提到的 Replit, Codespaces 與 Gitpod 是目前利用雲端運算管理分散式版次管理系統較為有名的環境, 使用者可以直接在瀏覽器中執行各種運算與程式的開發, wcm2024 網際內容管理的第一個階段, 便利用這些目前提供免費使用的範圍內來維護個人與分組的網站. 即便如此, 免費帳號各有不銅的限制, 目前允許免費使用的 Github Pages, 也可能在未來轉為收費服務, 因此未來希望對個人或團隊的倉儲或網站掌控最大權限, 仍需學習如何利用近端或自架主機管理及部署網際內容.&lt;/p&gt;
&lt;p&gt;首先, 透過 Windows 環境中的 USB 隨身碟, 配置可攜程式系統, 用來管理個人與分組的分組倉儲與網站, 之後再設法介紹如何利用自行建立的 Ubuntu 主機配置倉儲與網站.&lt;/p&gt;
&lt;h1&gt;利用 localhost 維護倉儲&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;前面提到的 Replit, Codespaces 與 Gitpod 是目前利用雲端運算管理分散式版次管理系統較為有名的環境, 使用者可以直接在瀏覽器中執行各種運算與程式的開發, wcm2024 網際內容管理的第一個階段, 便利用這些目前提供免費使用的範圍內來維護個人與分組的網站. 即便如此, 免費帳號各有不銅的限制, 目前允許免費使用的 Github Pages, 也可能在未來轉為收費服務, 因此未來希望對個人或團隊的倉儲或網站掌控最大權限, 仍需學習如何利用近端或自架主機管理及部署網際內容.&lt;/p&gt;
&lt;p&gt;首先, 透過 Windows 環境中的 USB 隨身碟, 配置可攜程式系統, 用來管理個人與分組的分組倉儲與網站, 之後再設法介紹如何利用自行建立的 Ubuntu 主機配置倉儲與網站.&lt;/p&gt;</content><category term="W3"></category><category term="wcm2024"></category></entry><entry><title>WCM2024 W2 課程</title><link href="./2024-WCM-W2-blog-tutorial.html" rel="alternate"></link><published>2024-03-07T11:00:00+08:00</published><updated>2024-06-20T01:18:30+08:00</updated><author><name>yen</name></author><id>tag:None,2024-03-07:./2024-WCM-W2-blog-tutorial.html</id><summary type="html">&lt;p&gt;確認各學員是否完成 Github 中個人倉儲與網站的建立, 並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;確認各學員是否完成 Github 中個人倉儲與網站的建立, 並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站.&lt;/p&gt;


&lt;h1&gt;確認所有學員都已經建立個人網站&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;建立個人課程網站步驟:&lt;/p&gt;
&lt;p&gt;1.登入 Github
2.連結到 https://github.com/mdecycu/cmsimde_site
3.利用 "Use this template" 下方的 "Create a new repository" 建立名稱為 wcm2024 的倉儲
4.在 wcm2024 倉儲上方的 Settings 設定頁面中, 左方 Pages 中的 Branch 分支區域, 選擇將 main 分支存為網頁的 root 根目錄
5.等 wcm2024 的倉儲 Github Pages 轉檔完成後, 可以看到 commits 提交區的綠色勾勾, 就完成網址為 https://帳號.github.io/wcm2024 的個人課程網站
利用上述步驟完成的倉儲內容, 同時帶有以 Python 編寫的動態網站程式, 以及位於 content 目錄中的靜態網頁資料.&lt;/p&gt;
&lt;h1&gt;確認學員已經會利用 Replit 維護網站&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;建議學員以 email 作為登入 Replit 的帳號, 不要依附在 Github 或 Gmail 帳號下, 以保有使用的獨立性.&lt;/p&gt;
&lt;p&gt;由於 wcm2024 課程學員使用 Replit 免費帳號, 因此雲端 IDE 僅允許使用 Port 80 與 443 啟動網頁, 因此若要在 Replit 檢視動態網站或網誌推送到 Github 之前的內容, 必須要在動態與靜態模式中擇一使用.&lt;/p&gt;
&lt;h1&gt;如何利用 Codespaces 維護網站&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Codespaces 屬於目前 Github 免費帳號下的功能之一, 與 Github 倉儲內容維護的整合度最高, 但是每個月的免費額度僅有 120 core hours, 若使用標準的 2 core 進行運算, 擇每天平均僅能使用兩個小時. 若提升至 4 core, 則每天可以使用 1 小時.&lt;/p&gt;
&lt;p&gt;採用 Github Codespaces 維護網站的好處是, Visual Studio code 介面提供多終端機與多 ports 開啟功能, 在 Codespaces 中維護 wcm2024 的過程幾乎如同在 localhost Windows 10 或 11 的操作系統環境中進行&lt;/p&gt;</content><category term="W2"></category><category term="wcm2024"></category></entry><entry><title>WCM2024 W1 課程</title><link href="./2024-WCM-W1-blog-tutorial.html" rel="alternate"></link><published>2024-02-22T11:00:00+08:00</published><updated>2024-06-19T14:25:46+08:00</updated><author><name>yen</name></author><id>tag:None,2024-02-22:./2024-WCM-W1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 WCM 如何建立課程倉儲&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 WCM 如何建立課程倉儲&lt;/p&gt;


&lt;h1&gt;建立Github帳號&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在Google搜尋Github並Sign up可用來建立並維護個人的課程倉儲與網站&lt;/p&gt;
&lt;h1&gt;建立個人課程網站&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;請至 cmsimde_site 倉儲,以此倉儲作為Template 建立個人的wcm2024倉儲,並設定個人的Github Pages課程網頁&lt;/p&gt;</content><category term="W1"></category><category term="2020FallCP"></category></entry><entry><title>2020 Fall CP 課程</title><link href="./2020-Fall-Intro-to-computer-programming.html" rel="alternate"></link><published>2020-08-13T11:00:00+08:00</published><updated>2024-03-21T03:18:26+08:00</updated><author><name>yen</name></author><id>tag:None,2020-08-13:./2020-Fall-Intro-to-computer-programming.html</id><summary type="html">&lt;p&gt;2020 Fall 計算機程式的教學主要介紹 Python 與 Flutter 在機械設計流程中的應用.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2020 Fall 計算機程式的教學主要介紹 Python 與 Flutter 在機械設計流程中的應用.&lt;/p&gt;


&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;Python 可以用來開發單機版的視窗程式套件 Pyslvs-UI&lt;/p&gt;
&lt;p&gt;Python 可以用來開發網際版的內容管理系統 CMSiMDE&lt;/p&gt;
&lt;p&gt;Python 可以用來控制 CoppeliaSim 與 Webots 虛擬環境中的機電系統&lt;/p&gt;
&lt;p&gt;Python 可以用於機器學習 Keras, Pytorch&lt;/p&gt;
&lt;h2&gt;Flutter&lt;/h2&gt;
&lt;p&gt;Flutter 可以用來開發跨 Apple 與 Android 手機與平板上的 Apps&lt;/p&gt;</content><category term="Misc"></category><category term="2020FallCP"></category></entry></feed>